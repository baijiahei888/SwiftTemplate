# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.54.0"

default_platform :ios

platform :ios do
    before_all do
        # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
        cocoapods

    end

    desc "Runs all the tests"
    lane :test do
        scan
    end

    desc "Submit a Dev Build to HockeyApp"
    lane :dev do
        sh 'gsed -i "s/:\/\/api.*.google.com/:\/\/api.dev.google.com/g" ../SwiftTemplate/Utils/Constant.swift'
                
        ENV["APP_IDENTIFIER"] = "com.pupboss.SwiftTemplate"
        update_info_plist( plist_path: "SwiftTemplate/Supporting Files/Info.plist", display_name: "Swift.a")
        cert
        pem
        sigh(adhoc: true)
        gym(scheme: "SwiftTemplate", export_method: "ad-hoc", export_xcargs: "-allowProvisioningUpdates")
        upload_symbols_to_crashlytics(api_token: "") # for avoiding a warning.
        hockey(
            release_type: "2",   #alpha
            api_token: ""
        )
    end

    desc "Submit a Beta Build to HockeyApp"
    lane :beta do
        sh 'gsed -i "s/:\/\/api.*.google.com/:\/\/api.beta.google.com/g" ../SwiftTemplate/Utils/Constant.swift'
        
        ENV["APP_IDENTIFIER"] = "com.pupboss.SwiftTemplate"
        update_info_plist( plist_path: "SwiftTemplate/Supporting Files/Info.plist", display_name: "Swift.b")
        cert
        pem
        sigh(adhoc: true)
        gym(scheme: "SwiftTemplate", export_method: "ad-hoc", export_xcargs: "-allowProvisioningUpdates")
        upload_symbols_to_crashlytics(api_token: "")
        hockey(
            api_token: ""
        )
    end


    lane :prod do
        sh 'gsed -i "s/:\/\/api.*.google.com/:\/\/api.google.com/g" ../SwiftTemplate/Utils/Constant.swift'
        
        ENV["APP_IDENTIFIER"] = "com.pupboss.SwiftTemplate"
        update_info_plist( plist_path: "SwiftTemplate/Supporting Files/Info.plist", display_name: "Swift")
        #precheck
        produce
        cert
        pem
        sigh(adhoc: true)
        gym(scheme: "SwiftTemplate", export_method: "ad-hoc", export_xcargs: "-allowProvisioningUpdates")
        upload_symbols_to_crashlytics(api_token: "")
        hockey(
            release_type: "3",
            api_token: ""
        )
    end

    desc "Deploy a new version to the App Store"
    lane :release do
        # match(type: "appstore")
        # snapshot
        sh 'gsed -i "s/:\/\/api.*.google.com/:\/\/api.google.com/g" ../SwiftTemplate/Utils/Constant.swift'
            
        ENV["APP_IDENTIFIER"] = "com.pupboss.SwiftTemplate"
        update_info_plist( plist_path: "SwiftTemplate/Supporting Files/Info.plist", display_name: "Swift")
        #precheck
        produce
        cert
        pem
        sigh
        gym(scheme: "SwiftTemplate",  export_xcargs: "-allowProvisioningUpdates")
        upload_symbols_to_crashlytics(api_token: "")
        deliver(force: true)
        # frameit
    end

    # You can define as many lanes as you want

    after_all do |lane|
        # This block is called, only if the executed lane was successful

        # slack(
        #   message: "Successfully deployed new App Update."
        # )
    end

    error do |lane, exception|
        # slack(
        #   message: exception.message,
        #   success: false
        # )
    end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://github.com/fastlane/fastlane#metrics
